-- 📛 FULL: Aimlock Toggle ON/OFF and bind/unbind BlockButton events

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local lp = Players.LocalPlayer
local cam = workspace.CurrentCamera
local gui = lp:WaitForChild("PlayerGui")

-- ✅ Global toggle variable for Aimlock
_G.aimlockEnabled = _G.aimlockEnabled or false

-- 📌 Find existing BlockButton
local jumpBtn = gui:FindFirstChild("JumpButton", true)
local blockBtn = jumpBtn and jumpBtn:FindFirstChild("BlockButton")

-- 🆕 Create Aimlock Toggle GUI
local toggleGui = Instance.new("ScreenGui", gui)
toggleGui.Name = "AimlockToggleGui"
toggleGui.ResetOnSpawn = false

local toggleBtn = Instance.new("TextButton")
toggleBtn.Name = "AimlockToggle"
toggleBtn.Size = UDim2.new(0, 140, 0, 40)
toggleBtn.Position = UDim2.new(0, 10, 0, 150)
toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 80, 80)
toggleBtn.BorderSizePixel = 0
toggleBtn.Text = "Aimlock: OFF"
toggleBtn.TextColor3 = Color3.new(1, 1, 1)
toggleBtn.TextScaled = true
toggleBtn.Font = Enum.Font.SourceSansBold
toggleBtn.Parent = toggleGui

-- 🎯 Aimlock variables
local holding = false
local target = nil
local conn = nil
local highlight = nil

-- 📌 Connections to allow disconnecting
local conDown, conUp = nil, nil

-- 📍 Remove highlight from target
local function removeHighlight()
	if highlight then
		highlight:Destroy()
		highlight = nil
	end
end

-- 🔓 Unlock (turn off aimlock)
local function unlock()
	if conn then conn:Disconnect() end
	conn = nil
	removeHighlight()
	target = nil
end

-- 🔎 Find the closest target on screen
local function getClosestTarget()
	local live = workspace:FindFirstChild("Live")
	if not live then return end

	local closest, shortest = nil, math.huge
	for _, model in ipairs(live:GetChildren()) do
		if model:IsA("Model") and model ~= lp.Character and model:FindFirstChild("HumanoidRootPart") and model:FindFirstChild("Humanoid") then
			if model.Humanoid.Health > 0 then
				local pos, onScreen = cam:WorldToViewportPoint(model.HumanoidRootPart.Position)
				if onScreen then
					local dist = (Vector2.new(pos.X, pos.Y) - Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y/2)).Magnitude
					if dist < shortest then
						shortest = dist
						closest = model
					end
				end
			end
		end
	end
	return closest
end

-- 🔒 Lock onto the target
local function lockOn()
	target = getClosestTarget()
	if not target then return end

	removeHighlight()
	highlight = Instance.new("Highlight")
	highlight.Adornee = target
	highlight.FillColor = Color3.fromHSV(math.random(), 1, 1)
	highlight.OutlineColor = Color3.new(1, 1, 1)
	highlight.FillTransparency = 0.3
	highlight.OutlineTransparency = 0
	highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
	highlight.Parent = target

	conn = RunService.RenderStepped:Connect(function()
		if holding and target and target:FindFirstChild("HumanoidRootPart") then
			cam.CFrame = CFrame.lookAt(cam.CFrame.Position, target.HumanoidRootPart.Position)
		end
	end)
end

-- ✅ Bind events to BlockButton
local function bindBlockButton()
	if not blockBtn then return end

	conDown = blockBtn.MouseButton1Down:Connect(function()
		holding = true
		lockOn()
	end)

	conUp = blockBtn.MouseButton1Up:Connect(function()
		holding = false
		unlock()
	end)
end

-- ❌ Unbind events from BlockButton
local function unbindBlockButton()
	if conDown then conDown:Disconnect() end
	if conUp then conUp:Disconnect() end
	holding = false
	unlock()
end

-- 🔁 Update the toggle UI
local function updateToggleUI()
	if _G.aimlockEnabled then
		toggleBtn.BackgroundColor3 = Color3.fromRGB(50, 200, 100)
		toggleBtn.Text = "Aimlock: ON"
	else
		toggleBtn.BackgroundColor3 = Color3.fromRGB(200, 80, 80)
		toggleBtn.Text = "Aimlock: OFF"
	end
end

-- 🖱️ On toggle click: enable/disable aimlock + bind/unbind events
toggleBtn.MouseButton1Click:Connect(function()
	_G.aimlockEnabled = not _G.aimlockEnabled
	updateToggleUI()

	if _G.aimlockEnabled then
		bindBlockButton()
	else
		unbindBlockButton()
	end
end)

-- 🟢 On script start: bind if already enabled
updateToggleUI()
if _G.aimlockEnabled then
	bindBlockButton()
end
